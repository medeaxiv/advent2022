# Advent of Code 2022 - 11

```elixir
Mix.install([{:kino, "~> 0.7.0"}])
```

## Input

```elixir
input = Kino.Input.textarea("Input")
```

```elixir
defmodule Monkey do
  defstruct [:id, :items, :operation, :test, :on_pass, :on_fail]

  defp operation(op) do
    ["old", operation, operand] = op |> String.split(" ")

    operation =
      case operation do
        "+" -> &+/2
        "*" -> &*/2
      end

    operand =
      case operand do
        "old" ->
          & &1

        _ ->
          value = String.to_integer(operand)
          fn _ -> value end
      end

    fn old -> operation.(old, operand.(old)) end
  end

  defp apply_spec(monkey, ["Monkey " <> id]),
    do: %__MODULE__{monkey | id: id}

  defp apply_spec(monkey, ["Starting items", items]) do
    items =
      items
      |> String.split(", ")
      |> Enum.map(&String.to_integer/1)

    %__MODULE__{monkey | items: items}
  end

  defp apply_spec(monkey, ["Operation", "new = " <> op]),
    do: %__MODULE__{monkey | operation: operation(op)}

  defp apply_spec(monkey, ["Test", "divisible by " <> value]),
    do: %__MODULE__{monkey | test: String.to_integer(value)}

  defp apply_spec(monkey, ["If true", "throw to monkey " <> id]),
    do: %__MODULE__{monkey | on_pass: id}

  defp apply_spec(monkey, ["If false", "throw to monkey " <> id]),
    do: %__MODULE__{monkey | on_fail: id}

  def from_spec(spec) do
    spec
    |> String.split("\n", trim: true)
    |> Enum.reduce(%__MODULE__{}, fn line, monkey ->
      line =
        line
        |> String.split(~r/: ?/, parts: 2, trim: true)
        |> Enum.map(&String.trim/1)

      apply_spec(monkey, line)
    end)
  end

  def target(monkey, item) do
    if rem(item, monkey.test) == 0 do
      monkey.on_pass
    else
      monkey.on_fail
    end
  end
end
```

```elixir
monkeys =
  Kino.Input.read(input)
  |> String.split("\n\n")
  |> Enum.map(&Monkey.from_spec/1)
```

## Part 1

```elixir
activity =
  monkeys
  |> Enum.map(fn monkey -> {monkey.id, 0} end)
  |> Map.new()
```

```elixir
held_items =
  monkeys
  |> Enum.map(fn monkey -> {monkey.id, monkey.items} end)
  |> Map.new()
```

```elixir
defmodule KeepAway do
  defp relax(_, true) do
    &Integer.floor_div(&1, 3)
  end

  defp relax(monkeys, false) do
    # a general solution would use a true Least Common Multiple algorithm
    # but since this problem only uses prime numbers, the product is the LCM
    lcm =
      monkeys
      |> Stream.map(& &1.test)
      |> Enum.product()

    &rem(&1, lcm)
  end

  defp inspect(monkey, item, held_items, relax_fn) do
    item =
      item
      |> monkey.operation.()
      |> relax_fn.()

    target = Monkey.target(monkey, item)
    Map.update!(held_items, target, &List.insert_at(&1, -1, item))
  end

  defp turn(monkey, activity, held_items, relax_fn) do
    monkey_activity = Map.get(activity, monkey.id)
    monkey_items = Map.get(held_items, monkey.id)

    held_items =
      monkey_items
      |> Enum.reduce(held_items, fn item, held_items ->
        inspect(monkey, item, held_items, relax_fn)
      end)

    {
      Map.put(activity, monkey.id, monkey_activity + Enum.count(monkey_items)),
      Map.put(held_items, monkey.id, [])
    }
  end

  def round(monkeys, activity, held_items, options \\ []) do
    relax = Keyword.get(options, :relax, true)
    relax_fn = relax(monkeys, relax)

    monkeys
    |> Enum.reduce({activity, held_items}, fn monkey, {activity, held_items} ->
      turn(monkey, activity, held_items, relax_fn)
    end)
  end
end
```

```elixir
1..20
|> Enum.reduce({activity, held_items}, fn _, {activity, held_items} ->
  KeepAway.round(monkeys, activity, held_items, relax: true)
end)
|> elem(0)
|> Map.values()
|> Enum.sort(&>/2)
|> Enum.take(2)
|> Enum.product()
```

## Part 2

```elixir
1..10000
|> Enum.reduce({activity, held_items}, fn _, {activity, held_items} ->
  KeepAway.round(monkeys, activity, held_items, relax: false)
end)
|> elem(0)
|> Map.values()
|> Enum.sort(&>/2)
|> Enum.take(2)
|> Enum.product()
```
