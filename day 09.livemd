# Advent of Code 2022 - 9

```elixir
Mix.install([{:kino, "~> 0.7.0"}])
```

## Input

```elixir
input = Kino.Input.textarea("Input")
```

```elixir
directions = %{"U" => :up, "D" => :down, "L" => :left, "R" => :right}

motions =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(fn line ->
    [direction, distance] = String.split(line, " ")
    {Map.get(directions, direction), String.to_integer(distance)}
  end)
```

```elixir
defmodule Rope do
  def new(length \\ 2) when length >= 2, do: List.duplicate({0, 0}, length)

  defp move({x, y}, :up), do: {x, y + 1}
  defp move({x, y}, :down), do: {x, y - 1}
  defp move({x, y}, :left), do: {x - 1, y}
  defp move({x, y}, :right), do: {x + 1, y}

  defp distance({x1, y1}, {x2, y2}), do: max(abs(x2 - x1), abs(y2 - y1))

  defp drag_one({xh, yh} = head, {xt, yt} = tail) do
    if distance(head, tail) > 1 do
      x_offset = max(-1, min(xh - xt, 1))
      y_offset = max(-1, min(yh - yt, 1))
      {xt + x_offset, yt + y_offset}
    else
      tail
    end
  end

  defp drag(head, [tail]) do
    [head, drag_one(head, tail)]
  end

  defp drag(head, [next | rest]) do
    [head] ++ (drag_one(head, next) |> drag(rest))
  end

  def pull([head | rest], direction) do
    head
    |> move(direction)
    |> drag(rest)
  end

  def pull(rope, direction, distance) do
    rope
    |> Stream.iterate(&pull(&1, direction))
    |> Stream.drop(1)
    |> Enum.take(distance)
  end
end
```

## Part 1

```elixir
motions
|> Enum.reduce([Rope.new()], fn {direction, distance}, [rope | _] = trail ->
  trail_segment = Rope.pull(rope, direction, distance)
  Enum.reverse(trail_segment) ++ trail
end)
|> Stream.map(&List.last(&1))
|> MapSet.new()
|> Enum.count()
```

## Part 2

```elixir
motions
|> Enum.reduce([Rope.new(10)], fn {direction, distance}, [rope | _] = trail ->
  trail_segment = Rope.pull(rope, direction, distance)
  Enum.reverse(trail_segment) ++ trail
end)
|> Stream.map(&List.last(&1))
|> MapSet.new()
|> Enum.count()
```
